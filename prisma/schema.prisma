// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  phoneE164             String    @unique @map("phone_e164")
  name                  String?
  avatarUrl             String?   @map("avatar_url")
  isOnboardingComplete  Boolean   @default(false) @map("is_onboarding_complete")
  onboardingCompletedAt DateTime? @map("onboarding_completed_at")
  monthlySalary         Decimal?  @map("monthly_salary") @db.Decimal(12, 2)
  currency              String    @default("INR")
  timeZone              String?   @map("time_zone")
  language              String    @default("en")
  notificationsEnabled  Boolean   @default(true) @map("notifications_enabled")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  categories     Category[]
  paymentIntents PaymentIntent[]
  userSettings   UserSettings?
  spendingCaps   SpendingCap[]

  @@map("users")
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique @map("user_id")
  themePreference      String   @default("system") // "light", "dark", "system"
  biometricEnabled     Boolean  @default(false) @map("biometric_enabled")
  transactionAlerts    Boolean  @default(true) @map("transaction_alerts")
  budgetAlerts         Boolean  @default(true) @map("budget_alerts")
  monthlyReports       Boolean  @default(true) @map("monthly_reports")
  marketingEmails      Boolean  @default(false) @map("marketing_emails")
  autoTagging          Boolean  @default(true) @map("auto_tagging")
  spendingInsights     Boolean  @default(true) @map("spending_insights")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Category {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  name              String
  color             String
  capAmount         Decimal?  @map("cap_amount") @db.Decimal(10, 2)
  softBlock         Boolean   @default(false) @map("soft_block")
  nearThresholdPct  Int       @default(80) @map("near_threshold_pct")
  periodStart       DateTime? @map("period_start")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags Tag[]
  spendingCaps SpendingCap[]

  @@unique([userId, name])
  @@map("categories")
}

model SpendingCap {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  categoryId   String   @map("category_id")
  categoryName String   @map("category_name")
  color        String
  description  String?
  dailyLimit   Decimal  @map("daily_limit") @db.Decimal(10, 2)
  weeklyLimit  Decimal  @map("weekly_limit") @db.Decimal(10, 2)
  monthlyLimit Decimal  @map("monthly_limit") @db.Decimal(10, 2)
  isEnabled    Boolean  @default(true) @map("is_enabled")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("spending_caps")
}

enum PaymentStatus {
  CREATED
  SUCCESS
  FAILED
  PENDING
  MANUAL
}

enum Platform {
  ANDROID
  IOS
}

model PaymentIntent {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  trRef       String        @unique @map("tr_ref") // Transaction reference
  vpa         String        // Virtual Payment Address
  payeeName   String?       @map("payee_name")
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("INR")
  status      PaymentStatus @default(CREATED)
  platform    Platform?
  entrypoint  String? // Where the payment was initiated from
  noteLong    String?       @map("note_long")
  initiatedAt DateTime      @default(now()) @map("initiated_at")
  completedAt DateTime?     @map("completed_at")
  upiTxnRef   String?       @map("upi_txn_ref") // UPI transaction reference from PSP
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags  Tag[]
  memos Memo[]

  @@map("payment_intents")
}

enum TagSource {
  AUTO
  MANUAL
}

model Tag {
  id              String        @id @default(cuid())
  paymentIntentId String        @map("payment_intent_id")
  categoryId      String        @map("category_id")
  tagText         String        @map("tag_text")
  source          TagSource     @default(AUTO)
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  paymentIntent PaymentIntent @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("tags")
}

enum MemoType {
  TEXT
  VOICE
}

model Memo {
  id              String        @id @default(cuid())
  paymentIntentId String        @map("payment_intent_id")
  type            MemoType
  textEncrypted   String?       @map("text_encrypted") // AES-GCM encrypted
  transcript      String?       // Voice-to-text transcript
  lang            String?       // Language code (e.g., "en", "hi")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  paymentIntent PaymentIntent  @relation(fields: [paymentIntentId], references: [id], onDelete: Cascade)
  attachments   Attachment[]

  @@map("memos")
}

model Attachment {
  id        String   @id @default(cuid())
  memoId    String   @map("memo_id")
  mediaType String   @map("media_type") // MIME type
  objectKey String   @map("object_key") // S3 object key
  durationMs Int?    @map("duration_ms") // For audio files
  sizeBytes  Int      @map("size_bytes")
  checksum   String   // SHA-256 checksum
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  memo Memo @relation(fields: [memoId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Indices for performance
model UserMonthlySpend {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  categoryId String   @map("category_id")
  year       Int
  month      Int
  amount     Decimal  @db.Decimal(12, 2)
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, categoryId, year, month])
  @@map("user_monthly_spends")
}

enum EscrowStatus {
  INITIATED
  PAID
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model EscrowTransaction {
  id                    String        @id // Custom ID format: CAPN_ESCROW_timestamp_hash
  payerUpi             String        @map("payer_upi")
  recipientUpi         String        @map("recipient_upi")
  amount               Decimal       @db.Decimal(10, 2)
  note                 String
  status               EscrowStatus  @default(INITIATED)
  escrowCollectionId   String?       @map("escrow_collection_id") // Decentro collection transaction ID
  escrowPayoutId       String?       @map("escrow_payout_id")     // Decentro payout transaction ID
  collectionStatus     String?       @map("collection_status")    // Collection webhook status
  payoutStatus         String?       @map("payout_status")        // Payout webhook status
  retryCount           Int           @default(0) @map("retry_count")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  @@index([payerUpi])
  @@index([recipientUpi])
  @@index([escrowCollectionId])
  @@index([escrowPayoutId])
  @@index([status])
  @@map("escrow_transactions")
}

model EscrowPayment {
  id                  String    @id @default(cuid())
  referenceId         String    @unique @map("reference_id")
  userId              String    @map("user_id")
  amount              Decimal   @db.Decimal(10, 2)
  recipientVpa        String    @map("recipient_vpa")
  recipientName       String?   @map("recipient_name")
  category            String?
  note                String?
  status              String    @default("collection_created")
  collectionTxnId     String    @map("collection_txn_id")
  payoutTxnId         String?   @map("payout_txn_id")
  payoutInitiatedAt   DateTime? @map("payout_initiated_at")
  completedAt         DateTime? @map("completed_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@index([referenceId])
  @@index([userId])
  @@index([status])
  @@map("escrow_payments")
}
